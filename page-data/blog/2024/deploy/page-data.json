{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2024-deploy-index-mdx","path":"/blog/2024/deploy/","result":{"data":{"mdx":{"id":"c9acb161-3ff1-5c01-90ce-4e30f345bbd8","body":"\n**Introduction:**\nAfter successfully connecting to your VPS, let's perform some basic setup steps on our Ubuntu VPS. This guide will walk you through updating packages, installing Nginx, creating a user with appropriate permissions, configuring Nginx, setting up firewall rules, obtaining SSL certification, and deploying your project using GitHub Actions.\n\n---\n\n**Updating and Upgrading Packages:**\nFirst, ensure your system is up to date by running:\n\n```bash\nsudo apt update\nsudo apt upgrade\n```\n\n---\n\n**Installing Nginx:**\nInstall Nginx using the following command:\n\n```bash\nsudo apt install nginx\n```\n\n---\n\n**Creating a User and Setting Permissions:**\nCreate a new user and grant it sudo permissions:\n\n```bash\nsudo adduser [your_user_name]\nsudo usermod -aG sudo [your_user_name]\n```\n\nGrant permissions for the user to create folders and write files:\n\n```bash\nsudo chmod -R 777 [your_directory_path]\n```\n\nfor me it's [your_directory_path] is /var/www,\nthis sudo chmod -R 777 is the command to provide permission to write or create folder as user,\ninside square bracket you need to put directory path,after that you have to switch to that user\n\n---\n\n**Creating Project Directory and Switching Users:**\nSwitch to the newly created user and set up your project directory:\nHere you will have to create a folder where you will do your necessary work, for me i'll work as name streaming,\nyou need to navigate to your directory where you want to create folder, for me it's /var/www,\nand this directory only available after nginx install.\n\n```bash\nsu - [your_user_name]\ncd /var/www\nmkdir streaming\ncd streaming\n```\n\n---\n\n**Configuring GitHub Actions:**\nCreate a GitHub repository and configure GitHub Actions to deploy your project automatically.\ni've already created a repository name streaming. go to your repository setting and find action,\nyou will see a option call runner, click that and you will see a option call add runner, click that and after that click self-hosted runner,\nhere you will see differen os option, choose linux and follow the instruction.\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dv4bfrnb9vcvxl8p7ed.png)\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvtmvzmkw044kjqwrrgz.png)\n\nAt very last step you need to install some packgae to make your runner active all the time.\nif you run ./run.sh, it will stay active for momentary but\nif exit it will be in offline. Sohere we have install a packgae to make it active all the time\n\n```bash\nsudo ./svc.sh install\n```\n\nafter that run it\n\n```bash\nsudo ./svc.sh start\n```\n\n---\n\nIt will be active all the time, and you can see it in your repository setting, runner option.\n\n## Environment(.env) Setup\n\nIt's important step to add environment variable in your project before deploying it automatically,\nyou can add environment variable in your repository setting, go to your repository setting and find secret,\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aedhpnfjmdqtwqv2wr59.png)\n\n![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0puwmb9j6swtrf2m0rx.png)\n\n**Installing Node.js and PM2:**\nInstall Node.js LTS version and PM2 for running your project in the background:\n\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt-get install -y nodejs\nnpm install -g pm2@latest\n```\n\n> You may encounter an error while downloading this package as a user.\n> To avoid this, you can switch to the root user by running the `exit` command,\n> then proceed with the installation. After that, we'll configure Nginx.\n> You can perform these steps as a root user or as a regular user.\n> For this guide, I'll be executing these steps as a root user.\n> To switch to the root user, use the command `cd /root`.\n\n```bash\nnode -v\nnpm -v\n```\n\n---\n\n**Configuring Nginx:**\nEdit the default Nginx configuration file to proxy requests to your application:\n\n```bash\nsudo nano /etc/nginx/sites-available/default\n```\n\nyou'll see default file now let's edit this default file\nAdd the following configuration:\n\n```nginx\n location / {\n            proxy_pass http://localhost:5000;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n```\n\n**proxy_pass http://localhost:5000 **: This command tells Nginx to forward requests it receives to http://localhost:5000, which is the address of the application you're running. Replace 5000 with the port number your application is running on.\n\n**proxy_http_version 1.1**: This command sets the version of the HTTP protocol that will be used for the proxy request. In this case, it's HTTP/1.1.\n\n**proxy_set_header Upgrade $http_upgrade**: This command sets the Upgrade HTTP header to the value of the $http_upgrade variable. This is used for handling WebSocket connections.\n\n**proxy_set_header Connection 'upgrade'**: This command sets the Connection HTTP header to the value 'upgrade'. This is also used for handling WebSocket connections.\n\n**proxy_set_header Host $host**: This command sets the Host HTTP header to the value of the $host variable. This is used to pass the original host header to the proxied server.\n\n**proxy_cache_bypass $http_upgrade**: This command tells Nginx to bypass the cache when the $http_upgrade variable is set. This is useful for WebSocket connections, which should not be cached.\n\n**N.B:** You can replaced localhost:5000 with your port number\n\nThen, restart Nginx:\n\n```bash\nsudo systemctl restart nginx\n```\n\n---\n\n**Firewall Configuration:**\nConfigure the firewall using UFW:\n\n```bash\nsudo ufw allow OpenSSH\nsudo ufw allow 'Nginx Full'\nsudo ufw enable\n```\n\n## Domain Setting\n\nIf you have custom domain and you want to use that domain for your project,\nyou need to add your domain name in the default file, you can find this file in /etc/nginx/sites-available/default, open this file and\nadd your domain name as server_name and save it.\n\n```bash\n     server_name api.reely.tech;\n\n        location / {\n            proxy_pass http://localhost:5000;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n```\n\n---\n\n**SSL Certification:**\nFirst Make sure that Nginx Full rule is available\n\n```\nufw status\n```\n\nInstall SSL certification using Let's Encrypt:\n\n```bash\nsudo apt install certbot python3-certbot-nginx\nsudo certbot --nginx -d example.com -d www.example.com\n```\n\n---\n\n**Adjusting Nginx Configuration for File Upload:**\nEdit the Nginx configuration file to allow larger file uploads:\n\n```bash\nsudo nano /etc/nginx/nginx.conf\n```\n\nAdd the following line inside the `http` block:\n\n```nginx\nclient_max_body_size 100M;\n```\n\nReload Nginx:\n\n```bash\nsudo systemctl reload nginx\n```\n\n---\n\n**GitHub Actions Deployment:**\nSet up GitHub Actions by creating a `.github/workflows/main.yml` file in your repository with the provided configuration.\n\n## Github Actions\n\nNow we are going to use github actions to deploy our project automatically. so let's go to our github repository and create a folder name .github and inside that folder create a folder name workflows and inside that folder create a file name main.yml. so the path will be .github/workflows/main.yml. now let's copy and paste this code in main.yml file\n\n```bash\nname: Node.js CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n        build:\n        runs-on: self-hosted\n        strategy:\n        matrix:\n                node-version: [14.x]\n        steps:\n        - uses: actions/checkout@v2\n        - name: Use Node.js ${{ matrix.node-version }}\n                uses: actions/setup-node@v1\n                with:\n                node-version: ${{ matrix.node-version }}\n        - name: npm install, build, and test\n                run: |\n                npm install\n                npm run build --if-present\n                npm run test --if-present\n        - name: Deploy to VPS\n                pm2 start npm --name \"streaming\" -- start\n\n```\n\nconfigure githbu actions according to your need. This one is for very important cause\nit will deploy your project automatically after push to master branch. so don't forget to configure it according to your need.,\n\n---\n\n**Conclusion:**\nBy following these steps, you can set up and deploy your project on an Ubuntu VPS with Nginx, GitHub Actions, SSL certification, and proper firewall configuration. This comprehensive guide ensures a smooth deployment process for your web application.\n\n---\n\n**Keywords:** Ubuntu VPS, Nginx, GitHub Actions, SSL Certification, Firewall Configuration, Node.js, PM2, Deployment, Let's Encrypt, File Upload, Configuration, GitHub Repository.\n","fields":{"slug":"/blog/2024/deploy/"},"internal":{"contentFilePath":"/home/runner/work/Portfolio/Portfolio/src/posts/2024/deploy/index.mdx"},"frontmatter":{"title":"Deploying Your Project on an Ubuntu VPS with Nginx, GitHub Actions, and SSL Certification","summary":"This article provides a comprehensive guide on setting up and deploying a project on an Ubuntu VPS using Nginx, GitHub Actions, SSL certification, and proper firewall configuration. ","date":"03 February, 2024","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/afa7be7e92575a136b8826172f8944f3/af76a/deploy.jpg","srcSet":"/static/afa7be7e92575a136b8826172f8944f3/af76a/deploy.jpg 700w","sizes":"100vw"},"sources":[{"srcSet":"/static/afa7be7e92575a136b8826172f8944f3/8623a/deploy.webp 700w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5714285714285714}}}}}},"pageContext":{"slug":"/blog/2024/deploy/","frontmatter":{"title":"Deploying Your Project on an Ubuntu VPS with Nginx, GitHub Actions, and SSL Certification","summary":"This article provides a comprehensive guide on setting up and deploying a project on an Ubuntu VPS using Nginx, GitHub Actions, SSL certification, and proper firewall configuration. ","cover":"assets/deploy.jpg","date":"2024-02-03T00:00:00.000Z"}}},"staticQueryHashes":[],"slicesMap":{}}